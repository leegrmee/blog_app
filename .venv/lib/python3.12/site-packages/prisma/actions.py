# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class userActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.user]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await user.prisma().query_raw(
            'SELECT * FROM user WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.user
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await user.prisma().query_first(
            'SELECT * FROM user WHERE username = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.userCreateInput,
        include: Optional[types.userInclude] = None
    ) -> _PrismaModelT:
        """Create a new user record.

        Parameters
        ----------
        data
            user record data
        include
            Specifies which relations should be loaded on the returned user model

        Returns
        -------
        prisma.models.user
            The created user record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a user record from just the required fields
        user = await user.prisma().create(
            data={
                # data to create a user record
                'username': 'ggciceaie',
                'email': 'bbehjachib',
                'hashedpassword': 'cadfabfehe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.userCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple user records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of user record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await user.prisma().create_many(
            data=[
                {
                    # data to create a user record
                    'username': 'dgiiaaijj',
                    'email': 'bfaiacjjfc',
                    'hashedpassword': 'eigcfgbif',
                },
                {
                    # data to create a user record
                    'username': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'hashedpassword': 'biabhbdai',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.userWhereUniqueInput,
        include: Optional[types.userInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single user record.

        Parameters
        ----------
        where
            user filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned user model

        Returns
        -------
        prisma.models.user
            The deleted user record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await user.prisma().delete(
            where={
                'id': 836760821,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.userWhereUniqueInput,
        include: Optional[types.userInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique user record.

        Parameters
        ----------
        where
            user filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned user model

        Returns
        -------
        prisma.models.user
            The found user record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await user.prisma().find_unique(
            where={
                'id': 595337866,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.userWhereUniqueInput,
        include: Optional[types.userInclude] = None
    ) -> _PrismaModelT:
        """Find a unique user record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            user filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned user model

        Returns
        -------
        prisma.models.user
            The found user record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await user.prisma().find_unique_or_raise(
            where={
                'id': 790425851,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.userWhereInput] = None,
        cursor: Optional[types.userWhereUniqueInput] = None,
        include: Optional[types.userInclude] = None,
        order: Optional[Union[types.userOrderByInput, List[types.userOrderByInput]]] = None,
        distinct: Optional[List[types.userScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple user records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of user records returned
        skip
            Ignore the first N results
        where
            user filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned user model
        order
            Order the returned user records by any field
        distinct
            Filter user records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.user]
            The list of all user records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 user records
        users = await user.prisma().find_many(take=10)

        # find the first 5 user records ordered by the email field
        users = await user.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.userWhereInput] = None,
        cursor: Optional[types.userWhereUniqueInput] = None,
        include: Optional[types.userInclude] = None,
        order: Optional[Union[types.userOrderByInput, List[types.userOrderByInput]]] = None,
        distinct: Optional[List[types.userScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single user record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            user filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned user model
        order
            Order the returned user records by any field
        distinct
            Filter user records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.user
            The first user record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second user record ordered by the hashedpassword field
        user = await user.prisma().find_first(
            skip=1,
            order={
                'hashedpassword': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.userWhereInput] = None,
        cursor: Optional[types.userWhereUniqueInput] = None,
        include: Optional[types.userInclude] = None,
        order: Optional[Union[types.userOrderByInput, List[types.userOrderByInput]]] = None,
        distinct: Optional[List[types.userScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single user record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            user filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned user model
        order
            Order the returned user records by any field
        distinct
            Filter user records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.user
            The first user record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second user record ordered by the role field
        user = await user.prisma().find_first_or_raise(
            skip=1,
            order={
                'role': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.userUpdateInput,
        where: types.userWhereUniqueInput,
        include: Optional[types.userInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single user record.

        Parameters
        ----------
        data
            user record data specifying what to update
        where
            user filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned user model

        Returns
        -------
        prisma.models.user
            The updated user record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await user.prisma().update(
            where={
                'id': 2111915288,
            },
            data={
                # data to update the user record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.userWhereUniqueInput,
        data: types.userUpsertInput,
        include: Optional[types.userInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            user filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned user model

        Returns
        -------
        prisma.models.user
            The created or updated user record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await user.prisma().upsert(
            where={
                'id': 1149758321,
            },
            data={
                'create': {
                    'id': 1149758321,
                    'username': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'hashedpassword': 'biabhbdai',
                },
                'update': {
                    'username': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'hashedpassword': 'biabhbdai',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.userUpdateManyMutationInput,
        where: types.userWhereInput,
    ) -> int:
        """Update multiple user records

        Parameters
        ----------
        data
            user data to update the selected user records to
        where
            Filter to select the user records to update

        Returns
        -------
        int
            The total number of user records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all user records
        total = await user.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.userWhereInput] = None,
        cursor: Optional[types.userWhereUniqueInput] = None,
    ) -> int:
        """Count the number of user records present in the database

        Parameters
        ----------
        select
            Select the user fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            user filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.userCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await user.prisma().count()

        # results: prisma.types.userCountAggregateOutput
        results = await user.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.userCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.userWhereInput] = None,
        cursor: Optional[types.userWhereUniqueInput] = None,
    ) -> types.userCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.userCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.userWhereInput] = None,
        cursor: Optional[types.userWhereUniqueInput] = None,
    ) -> Union[int, types.userCountAggregateOutput]:
        """Count the number of user records present in the database

        Parameters
        ----------
        select
            Select the user fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            user filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.userCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await user.prisma().count()

        # results: prisma.types.userCountAggregateOutput
        results = await user.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.userCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.userWhereInput] = None
    ) -> int:
        """Delete multiple user records.

        Parameters
        ----------
        where
            Optional user filter to find the records to be deleted

        Returns
        -------
        int
            The total number of user records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all user records
        total = await user.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.userScalarFieldKeys'],
        *,
        where: Optional['types.userWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.userAvgAggregateInput'] = None,
        sum: Optional['types.userSumAggregateInput'] = None,
        min: Optional['types.userMinAggregateInput'] = None,
        max: Optional['types.userMaxAggregateInput'] = None,
        having: Optional['types.userScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.userCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.userScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.userScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.userGroupByOutput']:
        """Group user records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar user fields to group records by
        where
            user filter to select records
        take
            Limit the maximum number of user records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.userGroupByOutput]
            A list of dictionaries representing the user record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group user records by username values
        # and count how many records are in each group
        results = await user.prisma().group_by(
            ['username'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class articleActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.article]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await article.prisma().query_raw(
            'SELECT * FROM article WHERE id = $1',
            1644289366,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.article
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await article.prisma().query_first(
            'SELECT * FROM article WHERE title = $1',
            'bdiicjafbj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.articleCreateInput,
        include: Optional[types.articleInclude] = None
    ) -> _PrismaModelT:
        """Create a new article record.

        Parameters
        ----------
        data
            article record data
        include
            Specifies which relations should be loaded on the returned article model

        Returns
        -------
        prisma.models.article
            The created article record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a article record from just the required fields
        article = await article.prisma().create(
            data={
                # data to create a article record
                'title': 'bgehebiafc',
                'content': 'bghffegacj',
                'user_id': 1767274722,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.articleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple article records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of article record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await article.prisma().create_many(
            data=[
                {
                    # data to create a article record
                    'title': 'dcgchcbbf',
                    'content': 'bdedcabahc',
                    'user_id': 675780521,
                },
                {
                    # data to create a article record
                    'title': 'heejgedji',
                    'content': 'bjgjgibgbf',
                    'user_id': 1116175964,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.articleWhereUniqueInput,
        include: Optional[types.articleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single article record.

        Parameters
        ----------
        where
            article filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned article model

        Returns
        -------
        prisma.models.article
            The deleted article record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        article = await article.prisma().delete(
            where={
                'id': 861472101,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.articleWhereUniqueInput,
        include: Optional[types.articleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique article record.

        Parameters
        ----------
        where
            article filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned article model

        Returns
        -------
        prisma.models.article
            The found article record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        article = await article.prisma().find_unique(
            where={
                'id': 1303003706,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.articleWhereUniqueInput,
        include: Optional[types.articleInclude] = None
    ) -> _PrismaModelT:
        """Find a unique article record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            article filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned article model

        Returns
        -------
        prisma.models.article
            The found article record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        article = await article.prisma().find_unique_or_raise(
            where={
                'id': 1686638315,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.articleWhereInput] = None,
        cursor: Optional[types.articleWhereUniqueInput] = None,
        include: Optional[types.articleInclude] = None,
        order: Optional[Union[types.articleOrderByInput, List[types.articleOrderByInput]]] = None,
        distinct: Optional[List[types.articleScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple article records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of article records returned
        skip
            Ignore the first N results
        where
            article filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned article model
        order
            Order the returned article records by any field
        distinct
            Filter article records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.article]
            The list of all article records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 article records
        articles = await article.prisma().find_many(take=10)

        # find the first 5 article records ordered by the content field
        articles = await article.prisma().find_many(
            take=5,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.articleWhereInput] = None,
        cursor: Optional[types.articleWhereUniqueInput] = None,
        include: Optional[types.articleInclude] = None,
        order: Optional[Union[types.articleOrderByInput, List[types.articleOrderByInput]]] = None,
        distinct: Optional[List[types.articleScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single article record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            article filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned article model
        order
            Order the returned article records by any field
        distinct
            Filter article records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.article
            The first article record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second article record ordered by the views field
        article = await article.prisma().find_first(
            skip=1,
            order={
                'views': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.articleWhereInput] = None,
        cursor: Optional[types.articleWhereUniqueInput] = None,
        include: Optional[types.articleInclude] = None,
        order: Optional[Union[types.articleOrderByInput, List[types.articleOrderByInput]]] = None,
        distinct: Optional[List[types.articleScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single article record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            article filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned article model
        order
            Order the returned article records by any field
        distinct
            Filter article records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.article
            The first article record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second article record ordered by the created_at field
        article = await article.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.articleUpdateInput,
        where: types.articleWhereUniqueInput,
        include: Optional[types.articleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single article record.

        Parameters
        ----------
        data
            article record data specifying what to update
        where
            article filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned article model

        Returns
        -------
        prisma.models.article
            The updated article record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        article = await article.prisma().update(
            where={
                'id': 2000430152,
            },
            data={
                # data to update the article record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.articleWhereUniqueInput,
        data: types.articleUpsertInput,
        include: Optional[types.articleInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            article filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned article model

        Returns
        -------
        prisma.models.article
            The created or updated article record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        article = await article.prisma().upsert(
            where={
                'id': 1868141281,
            },
            data={
                'create': {
                    'id': 1868141281,
                    'title': 'heejgedji',
                    'content': 'bjgjgibgbf',
                    'user_id': 1116175964,
                },
                'update': {
                    'title': 'heejgedji',
                    'content': 'bjgjgibgbf',
                    'user_id': 1116175964,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.articleUpdateManyMutationInput,
        where: types.articleWhereInput,
    ) -> int:
        """Update multiple article records

        Parameters
        ----------
        data
            article data to update the selected article records to
        where
            Filter to select the article records to update

        Returns
        -------
        int
            The total number of article records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all article records
        total = await article.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.articleWhereInput] = None,
        cursor: Optional[types.articleWhereUniqueInput] = None,
    ) -> int:
        """Count the number of article records present in the database

        Parameters
        ----------
        select
            Select the article fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            article filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.articleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await article.prisma().count()

        # results: prisma.types.articleCountAggregateOutput
        results = await article.prisma().count(
            select={
                '_all': True,
                'likes_count': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.articleCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.articleWhereInput] = None,
        cursor: Optional[types.articleWhereUniqueInput] = None,
    ) -> types.articleCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.articleCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.articleWhereInput] = None,
        cursor: Optional[types.articleWhereUniqueInput] = None,
    ) -> Union[int, types.articleCountAggregateOutput]:
        """Count the number of article records present in the database

        Parameters
        ----------
        select
            Select the article fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            article filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.articleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await article.prisma().count()

        # results: prisma.types.articleCountAggregateOutput
        results = await article.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.articleCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.articleWhereInput] = None
    ) -> int:
        """Delete multiple article records.

        Parameters
        ----------
        where
            Optional article filter to find the records to be deleted

        Returns
        -------
        int
            The total number of article records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all article records
        total = await article.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.articleScalarFieldKeys'],
        *,
        where: Optional['types.articleWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.articleAvgAggregateInput'] = None,
        sum: Optional['types.articleSumAggregateInput'] = None,
        min: Optional['types.articleMinAggregateInput'] = None,
        max: Optional['types.articleMaxAggregateInput'] = None,
        having: Optional['types.articleScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.articleCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.articleScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.articleScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.articleGroupByOutput']:
        """Group article records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar article fields to group records by
        where
            article filter to select records
        take
            Limit the maximum number of article records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.articleGroupByOutput]
            A list of dictionaries representing the article record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group article records by id values
        # and count how many records are in each group
        results = await article.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class categoryActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.category]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await category.prisma().query_raw(
            'SELECT * FROM category WHERE id = $1',
            1860847622,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.category
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await category.prisma().query_first(
            'SELECT * FROM category WHERE name = $1',
            'beeifcbebf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.categoryCreateInput,
        include: Optional[types.categoryInclude] = None
    ) -> _PrismaModelT:
        """Create a new category record.

        Parameters
        ----------
        data
            category record data
        include
            Specifies which relations should be loaded on the returned category model

        Returns
        -------
        prisma.models.category
            The created category record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a category record from just the required fields
        category = await category.prisma().create(
            data={
                # data to create a category record
                'name': 'bgcigfahea',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.categoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple category records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of category record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await category.prisma().create_many(
            data=[
                {
                    # data to create a category record
                    'name': 'bcejgaggif',
                },
                {
                    # data to create a category record
                    'name': 'idfjadbcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.categoryWhereUniqueInput,
        include: Optional[types.categoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single category record.

        Parameters
        ----------
        where
            category filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned category model

        Returns
        -------
        prisma.models.category
            The deleted category record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await category.prisma().delete(
            where={
                'id': 763719779,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.categoryWhereUniqueInput,
        include: Optional[types.categoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique category record.

        Parameters
        ----------
        where
            category filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned category model

        Returns
        -------
        prisma.models.category
            The found category record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await category.prisma().find_unique(
            where={
                'id': 429995104,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.categoryWhereUniqueInput,
        include: Optional[types.categoryInclude] = None
    ) -> _PrismaModelT:
        """Find a unique category record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            category filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned category model

        Returns
        -------
        prisma.models.category
            The found category record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await category.prisma().find_unique_or_raise(
            where={
                'id': 1775811865,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoryWhereInput] = None,
        cursor: Optional[types.categoryWhereUniqueInput] = None,
        include: Optional[types.categoryInclude] = None,
        order: Optional[Union[types.categoryOrderByInput, List[types.categoryOrderByInput]]] = None,
        distinct: Optional[List[types.categoryScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple category records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of category records returned
        skip
            Ignore the first N results
        where
            category filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned category model
        order
            Order the returned category records by any field
        distinct
            Filter category records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.category]
            The list of all category records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 category records
        categorys = await category.prisma().find_many(take=10)

        # find the first 5 category records ordered by the id field
        categorys = await category.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.categoryWhereInput] = None,
        cursor: Optional[types.categoryWhereUniqueInput] = None,
        include: Optional[types.categoryInclude] = None,
        order: Optional[Union[types.categoryOrderByInput, List[types.categoryOrderByInput]]] = None,
        distinct: Optional[List[types.categoryScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single category record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            category filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned category model
        order
            Order the returned category records by any field
        distinct
            Filter category records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.category
            The first category record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second category record ordered by the name field
        category = await category.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.categoryWhereInput] = None,
        cursor: Optional[types.categoryWhereUniqueInput] = None,
        include: Optional[types.categoryInclude] = None,
        order: Optional[Union[types.categoryOrderByInput, List[types.categoryOrderByInput]]] = None,
        distinct: Optional[List[types.categoryScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single category record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            category filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned category model
        order
            Order the returned category records by any field
        distinct
            Filter category records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.category
            The first category record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second category record ordered by the id field
        category = await category.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.categoryUpdateInput,
        where: types.categoryWhereUniqueInput,
        include: Optional[types.categoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single category record.

        Parameters
        ----------
        data
            category record data specifying what to update
        where
            category filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned category model

        Returns
        -------
        prisma.models.category
            The updated category record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        category = await category.prisma().update(
            where={
                'id': 893145566,
            },
            data={
                # data to update the category record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.categoryWhereUniqueInput,
        data: types.categoryUpsertInput,
        include: Optional[types.categoryInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            category filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned category model

        Returns
        -------
        prisma.models.category
            The created or updated category record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category = await category.prisma().upsert(
            where={
                'id': 995405759,
            },
            data={
                'create': {
                    'id': 995405759,
                    'name': 'idfjadbcc',
                },
                'update': {
                    'name': 'idfjadbcc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.categoryUpdateManyMutationInput,
        where: types.categoryWhereInput,
    ) -> int:
        """Update multiple category records

        Parameters
        ----------
        data
            category data to update the selected category records to
        where
            Filter to select the category records to update

        Returns
        -------
        int
            The total number of category records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all category records
        total = await category.prisma().update_many(
            data={
                'name': 'cbachdgfce'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoryWhereInput] = None,
        cursor: Optional[types.categoryWhereUniqueInput] = None,
    ) -> int:
        """Count the number of category records present in the database

        Parameters
        ----------
        select
            Select the category fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            category filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.categoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await category.prisma().count()

        # results: prisma.types.categoryCountAggregateOutput
        results = await category.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.categoryCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoryWhereInput] = None,
        cursor: Optional[types.categoryWhereUniqueInput] = None,
    ) -> types.categoryCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.categoryCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.categoryWhereInput] = None,
        cursor: Optional[types.categoryWhereUniqueInput] = None,
    ) -> Union[int, types.categoryCountAggregateOutput]:
        """Count the number of category records present in the database

        Parameters
        ----------
        select
            Select the category fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            category filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.categoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await category.prisma().count()

        # results: prisma.types.categoryCountAggregateOutput
        results = await category.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.categoryCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.categoryWhereInput] = None
    ) -> int:
        """Delete multiple category records.

        Parameters
        ----------
        where
            Optional category filter to find the records to be deleted

        Returns
        -------
        int
            The total number of category records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all category records
        total = await category.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.categoryScalarFieldKeys'],
        *,
        where: Optional['types.categoryWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.categoryAvgAggregateInput'] = None,
        sum: Optional['types.categorySumAggregateInput'] = None,
        min: Optional['types.categoryMinAggregateInput'] = None,
        max: Optional['types.categoryMaxAggregateInput'] = None,
        having: Optional['types.categoryScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.categoryCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.categoryScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.categoryScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.categoryGroupByOutput']:
        """Group category records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar category fields to group records by
        where
            category filter to select records
        take
            Limit the maximum number of category records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.categoryGroupByOutput]
            A list of dictionaries representing the category record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group category records by id values
        # and count how many records are in each group
        results = await category.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class category_to_articleActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.category_to_article]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await category_to_article.prisma().query_raw(
            'SELECT * FROM category_to_article WHERE article_id = $1',
            271520213,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.category_to_article
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await category_to_article.prisma().query_first(
            'SELECT * FROM category_to_article WHERE category_id = $1',
            456633834,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.category_to_articleCreateInput,
        include: Optional[types.category_to_articleInclude] = None
    ) -> _PrismaModelT:
        """Create a new category_to_article record.

        Parameters
        ----------
        data
            category_to_article record data
        include
            Specifies which relations should be loaded on the returned category_to_article model

        Returns
        -------
        prisma.models.category_to_article
            The created category_to_article record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a category_to_article record from just the required fields
        category_to_article = await category_to_article.prisma().create(
            data={
                # data to create a category_to_article record
                'article_id': 2058258651,
                'category_id': 1583689592,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.category_to_articleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple category_to_article records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of category_to_article record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await category_to_article.prisma().create_many(
            data=[
                {
                    # data to create a category_to_article record
                    'article_id': 878442065,
                    'category_id': 1675280054,
                },
                {
                    # data to create a category_to_article record
                    'article_id': 1627576247,
                    'category_id': 2054802212,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.category_to_articleWhereUniqueInput,
        include: Optional[types.category_to_articleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single category_to_article record.

        Parameters
        ----------
        where
            category_to_article filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned category_to_article model

        Returns
        -------
        prisma.models.category_to_article
            The deleted category_to_article record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category_to_article = await category_to_article.prisma().delete(
            where={
                # category_to_article where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.category_to_articleWhereUniqueInput,
        include: Optional[types.category_to_articleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique category_to_article record.

        Parameters
        ----------
        where
            category_to_article filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned category_to_article model

        Returns
        -------
        prisma.models.category_to_article
            The found category_to_article record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category_to_article = await category_to_article.prisma().find_unique(
            where={
                # category_to_article where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.category_to_articleWhereUniqueInput,
        include: Optional[types.category_to_articleInclude] = None
    ) -> _PrismaModelT:
        """Find a unique category_to_article record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            category_to_article filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned category_to_article model

        Returns
        -------
        prisma.models.category_to_article
            The found category_to_article record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category_to_article = await category_to_article.prisma().find_unique_or_raise(
            where={
                # category_to_article where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.category_to_articleWhereInput] = None,
        cursor: Optional[types.category_to_articleWhereUniqueInput] = None,
        include: Optional[types.category_to_articleInclude] = None,
        order: Optional[Union[types.category_to_articleOrderByInput, List[types.category_to_articleOrderByInput]]] = None,
        distinct: Optional[List[types.category_to_articleScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple category_to_article records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of category_to_article records returned
        skip
            Ignore the first N results
        where
            category_to_article filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned category_to_article model
        order
            Order the returned category_to_article records by any field
        distinct
            Filter category_to_article records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.category_to_article]
            The list of all category_to_article records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 category_to_article records
        category_to_articles = await category_to_article.prisma().find_many(take=10)

        # find the first 5 category_to_article records ordered by the article_id field
        category_to_articles = await category_to_article.prisma().find_many(
            take=5,
            order={
                'article_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.category_to_articleWhereInput] = None,
        cursor: Optional[types.category_to_articleWhereUniqueInput] = None,
        include: Optional[types.category_to_articleInclude] = None,
        order: Optional[Union[types.category_to_articleOrderByInput, List[types.category_to_articleOrderByInput]]] = None,
        distinct: Optional[List[types.category_to_articleScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single category_to_article record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            category_to_article filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned category_to_article model
        order
            Order the returned category_to_article records by any field
        distinct
            Filter category_to_article records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.category_to_article
            The first category_to_article record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second category_to_article record ordered by the category_id field
        category_to_article = await category_to_article.prisma().find_first(
            skip=1,
            order={
                'category_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.category_to_articleWhereInput] = None,
        cursor: Optional[types.category_to_articleWhereUniqueInput] = None,
        include: Optional[types.category_to_articleInclude] = None,
        order: Optional[Union[types.category_to_articleOrderByInput, List[types.category_to_articleOrderByInput]]] = None,
        distinct: Optional[List[types.category_to_articleScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single category_to_article record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            category_to_article filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned category_to_article model
        order
            Order the returned category_to_article records by any field
        distinct
            Filter category_to_article records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.category_to_article
            The first category_to_article record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second category_to_article record ordered by the article_id field
        category_to_article = await category_to_article.prisma().find_first_or_raise(
            skip=1,
            order={
                'article_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.category_to_articleUpdateInput,
        where: types.category_to_articleWhereUniqueInput,
        include: Optional[types.category_to_articleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single category_to_article record.

        Parameters
        ----------
        data
            category_to_article record data specifying what to update
        where
            category_to_article filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned category_to_article model

        Returns
        -------
        prisma.models.category_to_article
            The updated category_to_article record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        category_to_article = await category_to_article.prisma().update(
            where={
                # category_to_article where unique filter

            },
            data={
                # data to update the category_to_article record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.category_to_articleWhereUniqueInput,
        data: types.category_to_articleUpsertInput,
        include: Optional[types.category_to_articleInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            category_to_article filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned category_to_article model

        Returns
        -------
        prisma.models.category_to_article
            The created or updated category_to_article record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        category_to_article = await category_to_article.prisma().upsert(
            where={
                # category_to_article where unique filter
            },
            data={
                'create': {
                    # category_to_article data to be set if the record does not exist
                },
                'update': {
                    # category_to_article data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.category_to_articleUpdateManyMutationInput,
        where: types.category_to_articleWhereInput,
    ) -> int:
        """Update multiple category_to_article records

        Parameters
        ----------
        data
            category_to_article data to update the selected category_to_article records to
        where
            Filter to select the category_to_article records to update

        Returns
        -------
        int
            The total number of category_to_article records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all category_to_article records
        total = await category_to_article.prisma().update_many(
            data={
                'category_id': 60335757
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.category_to_articleWhereInput] = None,
        cursor: Optional[types.category_to_articleWhereUniqueInput] = None,
    ) -> int:
        """Count the number of category_to_article records present in the database

        Parameters
        ----------
        select
            Select the category_to_article fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            category_to_article filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.category_to_articleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await category_to_article.prisma().count()

        # results: prisma.types.category_to_articleCountAggregateOutput
        results = await category_to_article.prisma().count(
            select={
                '_all': True,
                'article_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.category_to_articleCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.category_to_articleWhereInput] = None,
        cursor: Optional[types.category_to_articleWhereUniqueInput] = None,
    ) -> types.category_to_articleCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.category_to_articleCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.category_to_articleWhereInput] = None,
        cursor: Optional[types.category_to_articleWhereUniqueInput] = None,
    ) -> Union[int, types.category_to_articleCountAggregateOutput]:
        """Count the number of category_to_article records present in the database

        Parameters
        ----------
        select
            Select the category_to_article fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            category_to_article filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.category_to_articleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await category_to_article.prisma().count()

        # results: prisma.types.category_to_articleCountAggregateOutput
        results = await category_to_article.prisma().count(
            select={
                '_all': True,
                'category_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.category_to_articleCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.category_to_articleWhereInput] = None
    ) -> int:
        """Delete multiple category_to_article records.

        Parameters
        ----------
        where
            Optional category_to_article filter to find the records to be deleted

        Returns
        -------
        int
            The total number of category_to_article records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all category_to_article records
        total = await category_to_article.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.category_to_articleScalarFieldKeys'],
        *,
        where: Optional['types.category_to_articleWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.category_to_articleAvgAggregateInput'] = None,
        sum: Optional['types.category_to_articleSumAggregateInput'] = None,
        min: Optional['types.category_to_articleMinAggregateInput'] = None,
        max: Optional['types.category_to_articleMaxAggregateInput'] = None,
        having: Optional['types.category_to_articleScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.category_to_articleCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.category_to_articleScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.category_to_articleScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.category_to_articleGroupByOutput']:
        """Group category_to_article records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar category_to_article fields to group records by
        where
            category_to_article filter to select records
        take
            Limit the maximum number of category_to_article records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.category_to_articleGroupByOutput]
            A list of dictionaries representing the category_to_article record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group category_to_article records by article_id values
        # and count how many records are in each group
        results = await category_to_article.prisma().group_by(
            ['article_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class commentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.comment]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await comment.prisma().query_raw(
            'SELECT * FROM comment WHERE id = $1',
            684462146,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.comment
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await comment.prisma().query_first(
            'SELECT * FROM comment WHERE content = $1',
            'bgcffadich',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.commentCreateInput,
        include: Optional[types.commentInclude] = None
    ) -> _PrismaModelT:
        """Create a new comment record.

        Parameters
        ----------
        data
            comment record data
        include
            Specifies which relations should be loaded on the returned comment model

        Returns
        -------
        prisma.models.comment
            The created comment record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a comment record from just the required fields
        comment = await comment.prisma().create(
            data={
                # data to create a comment record
                'content': 'fcbichhci',
                'article_id': 1266032265,
                'user_id': 93253262,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.commentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple comment records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of comment record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await comment.prisma().create_many(
            data=[
                {
                    # data to create a comment record
                    'content': 'cafdaehjid',
                    'article_id': 685333180,
                    'user_id': 127474245,
                },
                {
                    # data to create a comment record
                    'content': 'jeijcbhfe',
                    'article_id': 1964990155,
                    'user_id': 1228891816,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.commentWhereUniqueInput,
        include: Optional[types.commentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single comment record.

        Parameters
        ----------
        where
            comment filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned comment model

        Returns
        -------
        prisma.models.comment
            The deleted comment record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = await comment.prisma().delete(
            where={
                'id': 255202753,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.commentWhereUniqueInput,
        include: Optional[types.commentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique comment record.

        Parameters
        ----------
        where
            comment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned comment model

        Returns
        -------
        prisma.models.comment
            The found comment record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = await comment.prisma().find_unique(
            where={
                'id': 1223573862,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.commentWhereUniqueInput,
        include: Optional[types.commentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique comment record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            comment filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned comment model

        Returns
        -------
        prisma.models.comment
            The found comment record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = await comment.prisma().find_unique_or_raise(
            where={
                'id': 541269159,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.commentWhereInput] = None,
        cursor: Optional[types.commentWhereUniqueInput] = None,
        include: Optional[types.commentInclude] = None,
        order: Optional[Union[types.commentOrderByInput, List[types.commentOrderByInput]]] = None,
        distinct: Optional[List[types.commentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple comment records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of comment records returned
        skip
            Ignore the first N results
        where
            comment filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned comment model
        order
            Order the returned comment records by any field
        distinct
            Filter comment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.comment]
            The list of all comment records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 comment records
        comments = await comment.prisma().find_many(take=10)

        # find the first 5 comment records ordered by the created_at field
        comments = await comment.prisma().find_many(
            take=5,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.commentWhereInput] = None,
        cursor: Optional[types.commentWhereUniqueInput] = None,
        include: Optional[types.commentInclude] = None,
        order: Optional[Union[types.commentOrderByInput, List[types.commentOrderByInput]]] = None,
        distinct: Optional[List[types.commentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single comment record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            comment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned comment model
        order
            Order the returned comment records by any field
        distinct
            Filter comment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.comment
            The first comment record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second comment record ordered by the updated_at field
        comment = await comment.prisma().find_first(
            skip=1,
            order={
                'updated_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.commentWhereInput] = None,
        cursor: Optional[types.commentWhereUniqueInput] = None,
        include: Optional[types.commentInclude] = None,
        order: Optional[Union[types.commentOrderByInput, List[types.commentOrderByInput]]] = None,
        distinct: Optional[List[types.commentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single comment record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            comment filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned comment model
        order
            Order the returned comment records by any field
        distinct
            Filter comment records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.comment
            The first comment record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second comment record ordered by the article_id field
        comment = await comment.prisma().find_first_or_raise(
            skip=1,
            order={
                'article_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.commentUpdateInput,
        where: types.commentWhereUniqueInput,
        include: Optional[types.commentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single comment record.

        Parameters
        ----------
        data
            comment record data specifying what to update
        where
            comment filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned comment model

        Returns
        -------
        prisma.models.comment
            The updated comment record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        comment = await comment.prisma().update(
            where={
                'id': 1064846676,
            },
            data={
                # data to update the comment record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.commentWhereUniqueInput,
        data: types.commentUpsertInput,
        include: Optional[types.commentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            comment filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned comment model

        Returns
        -------
        prisma.models.comment
            The created or updated comment record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        comment = await comment.prisma().upsert(
            where={
                'id': 508382461,
            },
            data={
                'create': {
                    'id': 508382461,
                    'content': 'jeijcbhfe',
                    'article_id': 1964990155,
                    'user_id': 1228891816,
                },
                'update': {
                    'content': 'jeijcbhfe',
                    'article_id': 1964990155,
                    'user_id': 1228891816,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.commentUpdateManyMutationInput,
        where: types.commentWhereInput,
    ) -> int:
        """Update multiple comment records

        Parameters
        ----------
        data
            comment data to update the selected comment records to
        where
            Filter to select the comment records to update

        Returns
        -------
        int
            The total number of comment records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all comment records
        total = await comment.prisma().update_many(
            data={
                'user_id': 1024265714
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.commentWhereInput] = None,
        cursor: Optional[types.commentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of comment records present in the database

        Parameters
        ----------
        select
            Select the comment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            comment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.commentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await comment.prisma().count()

        # results: prisma.types.commentCountAggregateOutput
        results = await comment.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.commentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.commentWhereInput] = None,
        cursor: Optional[types.commentWhereUniqueInput] = None,
    ) -> types.commentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.commentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.commentWhereInput] = None,
        cursor: Optional[types.commentWhereUniqueInput] = None,
    ) -> Union[int, types.commentCountAggregateOutput]:
        """Count the number of comment records present in the database

        Parameters
        ----------
        select
            Select the comment fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            comment filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.commentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await comment.prisma().count()

        # results: prisma.types.commentCountAggregateOutput
        results = await comment.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.commentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.commentWhereInput] = None
    ) -> int:
        """Delete multiple comment records.

        Parameters
        ----------
        where
            Optional comment filter to find the records to be deleted

        Returns
        -------
        int
            The total number of comment records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all comment records
        total = await comment.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.commentScalarFieldKeys'],
        *,
        where: Optional['types.commentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.commentAvgAggregateInput'] = None,
        sum: Optional['types.commentSumAggregateInput'] = None,
        min: Optional['types.commentMinAggregateInput'] = None,
        max: Optional['types.commentMaxAggregateInput'] = None,
        having: Optional['types.commentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.commentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.commentScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.commentScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.commentGroupByOutput']:
        """Group comment records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar comment fields to group records by
        where
            comment filter to select records
        take
            Limit the maximum number of comment records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.commentGroupByOutput]
            A list of dictionaries representing the comment record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group comment records by created_at values
        # and count how many records are in each group
        results = await comment.prisma().group_by(
            ['created_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class likeActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.like]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await like.prisma().query_raw(
            'SELECT * FROM like WHERE created_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.like
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await like.prisma().query_first(
            'SELECT * FROM like WHERE updated_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.likeCreateInput,
        include: Optional[types.likeInclude] = None
    ) -> _PrismaModelT:
        """Create a new like record.

        Parameters
        ----------
        data
            like record data
        include
            Specifies which relations should be loaded on the returned like model

        Returns
        -------
        prisma.models.like
            The created like record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a like record from just the required fields
        like = await like.prisma().create(
            data={
                # data to create a like record
                'article_id': 872078403,
                'user_id': 1874748096,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.likeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple like records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of like record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await like.prisma().create_many(
            data=[
                {
                    # data to create a like record
                    'article_id': 916896761,
                    'user_id': 769267518,
                },
                {
                    # data to create a like record
                    'article_id': 820312479,
                    'user_id': 92728044,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.likeWhereUniqueInput,
        include: Optional[types.likeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single like record.

        Parameters
        ----------
        where
            like filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned like model

        Returns
        -------
        prisma.models.like
            The deleted like record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        like = await like.prisma().delete(
            where={
                # like where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.likeWhereUniqueInput,
        include: Optional[types.likeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique like record.

        Parameters
        ----------
        where
            like filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned like model

        Returns
        -------
        prisma.models.like
            The found like record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        like = await like.prisma().find_unique(
            where={
                # like where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.likeWhereUniqueInput,
        include: Optional[types.likeInclude] = None
    ) -> _PrismaModelT:
        """Find a unique like record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            like filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned like model

        Returns
        -------
        prisma.models.like
            The found like record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        like = await like.prisma().find_unique_or_raise(
            where={
                # like where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.likeWhereInput] = None,
        cursor: Optional[types.likeWhereUniqueInput] = None,
        include: Optional[types.likeInclude] = None,
        order: Optional[Union[types.likeOrderByInput, List[types.likeOrderByInput]]] = None,
        distinct: Optional[List[types.likeScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple like records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of like records returned
        skip
            Ignore the first N results
        where
            like filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned like model
        order
            Order the returned like records by any field
        distinct
            Filter like records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.like]
            The list of all like records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 like records
        likes = await like.prisma().find_many(take=10)

        # find the first 5 like records ordered by the article_id field
        likes = await like.prisma().find_many(
            take=5,
            order={
                'article_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.likeWhereInput] = None,
        cursor: Optional[types.likeWhereUniqueInput] = None,
        include: Optional[types.likeInclude] = None,
        order: Optional[Union[types.likeOrderByInput, List[types.likeOrderByInput]]] = None,
        distinct: Optional[List[types.likeScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single like record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            like filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned like model
        order
            Order the returned like records by any field
        distinct
            Filter like records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.like
            The first like record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second like record ordered by the user_id field
        like = await like.prisma().find_first(
            skip=1,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.likeWhereInput] = None,
        cursor: Optional[types.likeWhereUniqueInput] = None,
        include: Optional[types.likeInclude] = None,
        order: Optional[Union[types.likeOrderByInput, List[types.likeOrderByInput]]] = None,
        distinct: Optional[List[types.likeScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single like record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            like filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned like model
        order
            Order the returned like records by any field
        distinct
            Filter like records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.like
            The first like record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second like record ordered by the created_at field
        like = await like.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.likeUpdateInput,
        where: types.likeWhereUniqueInput,
        include: Optional[types.likeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single like record.

        Parameters
        ----------
        data
            like record data specifying what to update
        where
            like filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned like model

        Returns
        -------
        prisma.models.like
            The updated like record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        like = await like.prisma().update(
            where={
                # like where unique filter

            },
            data={
                # data to update the like record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.likeWhereUniqueInput,
        data: types.likeUpsertInput,
        include: Optional[types.likeInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            like filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned like model

        Returns
        -------
        prisma.models.like
            The created or updated like record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        like = await like.prisma().upsert(
            where={
                # like where unique filter
            },
            data={
                'create': {
                    # like data to be set if the record does not exist
                },
                'update': {
                    # like data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.likeUpdateManyMutationInput,
        where: types.likeWhereInput,
    ) -> int:
        """Update multiple like records

        Parameters
        ----------
        data
            like data to update the selected like records to
        where
            Filter to select the like records to update

        Returns
        -------
        int
            The total number of like records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all like records
        total = await like.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.likeWhereInput] = None,
        cursor: Optional[types.likeWhereUniqueInput] = None,
    ) -> int:
        """Count the number of like records present in the database

        Parameters
        ----------
        select
            Select the like fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            like filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.likeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await like.prisma().count()

        # results: prisma.types.likeCountAggregateOutput
        results = await like.prisma().count(
            select={
                '_all': True,
                'article_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.likeCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.likeWhereInput] = None,
        cursor: Optional[types.likeWhereUniqueInput] = None,
    ) -> types.likeCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.likeCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.likeWhereInput] = None,
        cursor: Optional[types.likeWhereUniqueInput] = None,
    ) -> Union[int, types.likeCountAggregateOutput]:
        """Count the number of like records present in the database

        Parameters
        ----------
        select
            Select the like fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            like filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.likeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await like.prisma().count()

        # results: prisma.types.likeCountAggregateOutput
        results = await like.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.likeCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.likeWhereInput] = None
    ) -> int:
        """Delete multiple like records.

        Parameters
        ----------
        where
            Optional like filter to find the records to be deleted

        Returns
        -------
        int
            The total number of like records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all like records
        total = await like.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.likeScalarFieldKeys'],
        *,
        where: Optional['types.likeWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.likeAvgAggregateInput'] = None,
        sum: Optional['types.likeSumAggregateInput'] = None,
        min: Optional['types.likeMinAggregateInput'] = None,
        max: Optional['types.likeMaxAggregateInput'] = None,
        having: Optional['types.likeScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.likeCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.likeScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.likeScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.likeGroupByOutput']:
        """Group like records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar like fields to group records by
        where
            like filter to select records
        take
            Limit the maximum number of like records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.likeGroupByOutput]
            A list of dictionaries representing the like record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group like records by created_at values
        # and count how many records are in each group
        results = await like.prisma().group_by(
            ['created_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class fileActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.file]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await file.prisma().query_raw(
            'SELECT * FROM file WHERE id = $1',
            344858293,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.file
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await file.prisma().query_first(
            'SELECT * FROM file WHERE path = $1',
            'bbcbhebbda',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.fileCreateInput,
        include: Optional[types.fileInclude] = None
    ) -> _PrismaModelT:
        """Create a new file record.

        Parameters
        ----------
        data
            file record data
        include
            Specifies which relations should be loaded on the returned file model

        Returns
        -------
        prisma.models.file
            The created file record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a file record from just the required fields
        file = await file.prisma().create(
            data={
                # data to create a file record
                'path': 'bejfijgcfb',
                'filename': 'caifcbgii',
                'mimetype': 'igaibbfgj',
                'article_id': 1660932118,
                'user_id': 525761943,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.fileCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple file records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of file record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await file.prisma().create_many(
            data=[
                {
                    # data to create a file record
                    'path': 'hdgcajhjg',
                    'filename': 'ejdjahicb',
                    'mimetype': 'gdjgigfgc',
                    'article_id': 654007347,
                    'user_id': 1905261552,
                },
                {
                    # data to create a file record
                    'path': 'hihegjif',
                    'filename': 'bdjidcidac',
                    'mimetype': 'ifgaaagff',
                    'article_id': 1452336924,
                    'user_id': 1573199653,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.fileWhereUniqueInput,
        include: Optional[types.fileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single file record.

        Parameters
        ----------
        where
            file filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned file model

        Returns
        -------
        prisma.models.file
            The deleted file record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await file.prisma().delete(
            where={
                'id': 2013903098,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.fileWhereUniqueInput,
        include: Optional[types.fileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique file record.

        Parameters
        ----------
        where
            file filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned file model

        Returns
        -------
        prisma.models.file
            The found file record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await file.prisma().find_unique(
            where={
                'id': 500965035,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.fileWhereUniqueInput,
        include: Optional[types.fileInclude] = None
    ) -> _PrismaModelT:
        """Find a unique file record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            file filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned file model

        Returns
        -------
        prisma.models.file
            The found file record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await file.prisma().find_unique_or_raise(
            where={
                'id': 1800624392,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.fileWhereInput] = None,
        cursor: Optional[types.fileWhereUniqueInput] = None,
        include: Optional[types.fileInclude] = None,
        order: Optional[Union[types.fileOrderByInput, List[types.fileOrderByInput]]] = None,
        distinct: Optional[List[types.fileScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple file records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of file records returned
        skip
            Ignore the first N results
        where
            file filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned file model
        order
            Order the returned file records by any field
        distinct
            Filter file records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.file]
            The list of all file records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 file records
        files = await file.prisma().find_many(take=10)

        # find the first 5 file records ordered by the filename field
        files = await file.prisma().find_many(
            take=5,
            order={
                'filename': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.fileWhereInput] = None,
        cursor: Optional[types.fileWhereUniqueInput] = None,
        include: Optional[types.fileInclude] = None,
        order: Optional[Union[types.fileOrderByInput, List[types.fileOrderByInput]]] = None,
        distinct: Optional[List[types.fileScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single file record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            file filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned file model
        order
            Order the returned file records by any field
        distinct
            Filter file records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.file
            The first file record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second file record ordered by the mimetype field
        file = await file.prisma().find_first(
            skip=1,
            order={
                'mimetype': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.fileWhereInput] = None,
        cursor: Optional[types.fileWhereUniqueInput] = None,
        include: Optional[types.fileInclude] = None,
        order: Optional[Union[types.fileOrderByInput, List[types.fileOrderByInput]]] = None,
        distinct: Optional[List[types.fileScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single file record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            file filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned file model
        order
            Order the returned file records by any field
        distinct
            Filter file records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.file
            The first file record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second file record ordered by the created_at field
        file = await file.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.fileUpdateInput,
        where: types.fileWhereUniqueInput,
        include: Optional[types.fileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single file record.

        Parameters
        ----------
        data
            file record data specifying what to update
        where
            file filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned file model

        Returns
        -------
        prisma.models.file
            The updated file record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        file = await file.prisma().update(
            where={
                'id': 2077067425,
            },
            data={
                # data to update the file record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.fileWhereUniqueInput,
        data: types.fileUpsertInput,
        include: Optional[types.fileInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            file filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned file model

        Returns
        -------
        prisma.models.file
            The created or updated file record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await file.prisma().upsert(
            where={
                'id': 1672112838,
            },
            data={
                'create': {
                    'id': 1672112838,
                    'path': 'hihegjif',
                    'filename': 'bdjidcidac',
                    'mimetype': 'ifgaaagff',
                    'article_id': 1452336924,
                    'user_id': 1573199653,
                },
                'update': {
                    'path': 'hihegjif',
                    'filename': 'bdjidcidac',
                    'mimetype': 'ifgaaagff',
                    'article_id': 1452336924,
                    'user_id': 1573199653,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.fileUpdateManyMutationInput,
        where: types.fileWhereInput,
    ) -> int:
        """Update multiple file records

        Parameters
        ----------
        data
            file data to update the selected file records to
        where
            Filter to select the file records to update

        Returns
        -------
        int
            The total number of file records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all file records
        total = await file.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.fileWhereInput] = None,
        cursor: Optional[types.fileWhereUniqueInput] = None,
    ) -> int:
        """Count the number of file records present in the database

        Parameters
        ----------
        select
            Select the file fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            file filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.fileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await file.prisma().count()

        # results: prisma.types.fileCountAggregateOutput
        results = await file.prisma().count(
            select={
                '_all': True,
                'article_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.fileCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.fileWhereInput] = None,
        cursor: Optional[types.fileWhereUniqueInput] = None,
    ) -> types.fileCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.fileCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.fileWhereInput] = None,
        cursor: Optional[types.fileWhereUniqueInput] = None,
    ) -> Union[int, types.fileCountAggregateOutput]:
        """Count the number of file records present in the database

        Parameters
        ----------
        select
            Select the file fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            file filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.fileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await file.prisma().count()

        # results: prisma.types.fileCountAggregateOutput
        results = await file.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.fileCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.fileWhereInput] = None
    ) -> int:
        """Delete multiple file records.

        Parameters
        ----------
        where
            Optional file filter to find the records to be deleted

        Returns
        -------
        int
            The total number of file records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all file records
        total = await file.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.fileScalarFieldKeys'],
        *,
        where: Optional['types.fileWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.fileAvgAggregateInput'] = None,
        sum: Optional['types.fileSumAggregateInput'] = None,
        min: Optional['types.fileMinAggregateInput'] = None,
        max: Optional['types.fileMaxAggregateInput'] = None,
        having: Optional['types.fileScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.fileCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.fileScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.fileScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.fileGroupByOutput']:
        """Group file records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar file fields to group records by
        where
            file filter to select records
        take
            Limit the maximum number of file records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.fileGroupByOutput]
            A list of dictionaries representing the file record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group file records by id values
        # and count how many records are in each group
        results = await file.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models