# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    role: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articles: 'ArticleCreateManyNestedWithoutRelationsInput'
    comments: 'CommentCreateManyNestedWithoutRelationsInput'
    likes: 'LikeCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    username: _str
    email: _str
    hashed_password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    role: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    username: _str
    email: _str
    hashed_password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    username: _str
    email: _str
    hashed_password: _str
    role: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articles: 'ArticleUpdateManyWithoutRelationsInput'
    comments: 'CommentUpdateManyWithoutRelationsInput'
    likes: 'LikeUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    username: _str
    email: _str
    hashed_password: _str
    role: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_hashed_password_OrderByInput = TypedDict(
    '_User_hashed_password_OrderByInput',
    {
        'hashed_password': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_email_OrderByInput',
    '_User_hashed_password_OrderByInput',
    '_User_role_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    articles: Union[bool, 'FindManyArticleArgsFromUser']
    comments: Union[bool, 'FindManyCommentArgsFromUser']
    likes: Union[bool, 'FindManyLikeArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyArticleArgsFromUserRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyArticleArgsFromUserRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyArticleArgsFromUserRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyArticleArgsFromUserRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ArticleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive1']


class ArticleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive2']


class ArticleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive3']


class ArticleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive4']


class ArticleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ArticleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ArticleIncludeFromArticleRecursive1'


class ArticleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ArticleIncludeFromArticleRecursive2'


class ArticleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ArticleIncludeFromArticleRecursive3'


class ArticleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ArticleIncludeFromArticleRecursive4'


class ArticleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyArticleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive1'


class FindManyArticleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive2'


class FindManyArticleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive3'


class FindManyArticleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive4'


class FindManyArticleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    
    

class CategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive1']


class CategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive2']


class CategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive3']


class CategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromUserRecursive4']


class CategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class CategoryToArticleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive1']
    category: Union[bool, 'CategoryArgsFromUserRecursive1']


class CategoryToArticleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive2']
    category: Union[bool, 'CategoryArgsFromUserRecursive2']


class CategoryToArticleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive3']
    category: Union[bool, 'CategoryArgsFromUserRecursive3']


class CategoryToArticleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive4']
    category: Union[bool, 'CategoryArgsFromUserRecursive4']


class CategoryToArticleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CategoryToArticleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class CategoryToArticleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class CategoryToArticleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class CategoryToArticleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class CategoryToArticleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCategoryToArticleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class FindManyCategoryToArticleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class FindManyCategoryToArticleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class FindManyCategoryToArticleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class FindManyCategoryToArticleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    
    

class CommentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class CommentIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class CommentIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class CommentIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class CommentIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CommentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCommentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class LikeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class LikeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class LikeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    article: Union[bool, 'ArticleArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class LikeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class LikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyLikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    hashed_password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articles: 'ArticleListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    hashed_password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articles: 'ArticleListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    hashed_password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articles: 'ArticleListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    hashed_password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articles: 'ArticleListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    hashed_password: Union[_str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articles: 'ArticleListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    hashed_password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    hashed_password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    hashed_password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    hashed_password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    hashed_password: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    username: _str
    email: _str
    hashed_password: _str
    role: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    username: _str
    email: _str
    hashed_password: _str
    role: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    username: bool
    email: bool
    hashed_password: bool
    role: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    username: bool
    email: bool
    hashed_password: bool
    role: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'username': bool,
        'email': bool,
        'hashed_password': bool,
        'role': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'username': int,
        'email': int,
        'hashed_password': int,
        'role': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'username',
    'email',
    'hashed_password',
    'role',
    'createdAt',
    'updatedAt',
    'articles',
    'comments',
    'likes',
]
UserScalarFieldKeys = Literal[
    'id',
    'username',
    'email',
    'hashed_password',
    'role',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'articles',
        'comments',
        'likes',
    ]

# Article types

class ArticleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Article create method"""
    id: _int
    views: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    comments: 'CommentCreateManyNestedWithoutRelationsInput'
    likes: 'LikeCreateManyNestedWithoutRelationsInput'
    categories: 'CategoryToArticleCreateManyNestedWithoutRelationsInput'


class ArticleCreateInput(ArticleOptionalCreateInput):
    """Required arguments to the Article create method"""
    title: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ArticleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Article create method, without relations"""
    id: _int
    views: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _int


class ArticleCreateWithoutRelationsInput(ArticleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Article create method, without relations"""
    title: _str
    content: _str

class ArticleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ArticleCreateWithoutRelationsInput'
    where: 'ArticleWhereUniqueInput'

class ArticleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ArticleCreateWithoutRelationsInput'
    connect: 'ArticleWhereUniqueInput'
    connect_or_create: 'ArticleConnectOrCreateWithoutRelationsInput'


class ArticleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ArticleCreateWithoutRelationsInput', List['ArticleCreateWithoutRelationsInput']]
    connect: Union['ArticleWhereUniqueInput', List['ArticleWhereUniqueInput']]
    connect_or_create: Union['ArticleConnectOrCreateWithoutRelationsInput', List['ArticleConnectOrCreateWithoutRelationsInput']]

_ArticleWhereUnique_id_Input = TypedDict(
    '_ArticleWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ArticleWhereUniqueInput = _ArticleWhereUnique_id_Input


class ArticleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    content: _str
    views: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    comments: 'CommentUpdateManyWithoutRelationsInput'
    likes: 'LikeUpdateManyWithoutRelationsInput'
    categories: 'CategoryToArticleUpdateManyWithoutRelationsInput'


class ArticleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    content: _str
    views: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ArticleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ArticleCreateWithoutRelationsInput']
    connect: List['ArticleWhereUniqueInput']
    connect_or_create: List['ArticleConnectOrCreateWithoutRelationsInput']
    set: List['ArticleWhereUniqueInput']
    disconnect: List['ArticleWhereUniqueInput']
    delete: List['ArticleWhereUniqueInput']

    # TODO
    # update: List['ArticleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ArticleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ArticleScalarWhereInput']
    # upsert: List['ArticleUpserteWithWhereUniqueWithoutRelationsInput']


class ArticleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ArticleCreateWithoutRelationsInput'
    connect: 'ArticleWhereUniqueInput'
    connect_or_create: 'ArticleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ArticleUpdateInput'
    # upsert: 'ArticleUpsertWithoutRelationsInput'


class ArticleUpsertInput(TypedDict):
    create: 'ArticleCreateInput'
    update: 'ArticleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Article_id_OrderByInput = TypedDict(
    '_Article_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Article_title_OrderByInput = TypedDict(
    '_Article_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Article_content_OrderByInput = TypedDict(
    '_Article_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Article_views_OrderByInput = TypedDict(
    '_Article_views_OrderByInput',
    {
        'views': 'SortOrder',
    },
    total=True
)

_Article_createdAt_OrderByInput = TypedDict(
    '_Article_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Article_updatedAt_OrderByInput = TypedDict(
    '_Article_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Article_userId_OrderByInput = TypedDict(
    '_Article_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Article_RelevanceInner = TypedDict(
    '_Article_RelevanceInner',
    {
        'fields': 'List[ArticleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Article_RelevanceOrderByInput = TypedDict(
    '_Article_RelevanceOrderByInput',
    {
        '_relevance': '_Article_RelevanceInner',
    },
    total=True
)

ArticleOrderByInput = Union[
    '_Article_id_OrderByInput',
    '_Article_title_OrderByInput',
    '_Article_content_OrderByInput',
    '_Article_views_OrderByInput',
    '_Article_createdAt_OrderByInput',
    '_Article_updatedAt_OrderByInput',
    '_Article_userId_OrderByInput',
    '_Article_RelevanceOrderByInput',
]



# recursive Article types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ArticleRelationFilter = TypedDict(
    'ArticleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ArticleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ArticleInclude(TypedDict, total=False):
    """Article relational arguments"""
    user: Union[bool, 'UserArgsFromArticle']
    comments: Union[bool, 'FindManyCommentArgsFromArticle']
    likes: Union[bool, 'FindManyLikeArgsFromArticle']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromArticle']


    

class UserIncludeFromArticle(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyArticleArgsFromArticleRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive1']


class UserIncludeFromArticleRecursive1(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyArticleArgsFromArticleRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive2']


class UserIncludeFromArticleRecursive2(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyArticleArgsFromArticleRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive3']


class UserIncludeFromArticleRecursive3(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyArticleArgsFromArticleRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive4']


class UserIncludeFromArticleRecursive4(TypedDict, total=False):
    """Relational arguments for Article"""

    

class UserArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    
    

class FindManyUserArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ArticleIncludeFromArticle(TypedDict, total=False):
    """Relational arguments for Article"""
    user: Union[bool, 'UserArgsFromArticleRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive1']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive1']


class ArticleIncludeFromArticleRecursive1(TypedDict, total=False):
    """Relational arguments for Article"""
    user: Union[bool, 'UserArgsFromArticleRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive2']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive2']


class ArticleIncludeFromArticleRecursive2(TypedDict, total=False):
    """Relational arguments for Article"""
    user: Union[bool, 'UserArgsFromArticleRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive3']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive3']


class ArticleIncludeFromArticleRecursive3(TypedDict, total=False):
    """Relational arguments for Article"""
    user: Union[bool, 'UserArgsFromArticleRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromArticleRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromArticleRecursive4']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive4']


class ArticleIncludeFromArticleRecursive4(TypedDict, total=False):
    """Relational arguments for Article"""

    

class ArticleArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    include: 'ArticleIncludeFromArticleRecursive1'


class ArticleArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    include: 'ArticleIncludeFromArticleRecursive2'


class ArticleArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    include: 'ArticleIncludeFromArticleRecursive3'


class ArticleArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    include: 'ArticleIncludeFromArticleRecursive4'


class ArticleArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    
    

class FindManyArticleArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive1'


class FindManyArticleArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive2'


class FindManyArticleArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive3'


class FindManyArticleArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive4'


class FindManyArticleArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    
    

class CategoryIncludeFromArticle(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive1']


class CategoryIncludeFromArticleRecursive1(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive2']


class CategoryIncludeFromArticleRecursive2(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive3']


class CategoryIncludeFromArticleRecursive3(TypedDict, total=False):
    """Relational arguments for Article"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromArticleRecursive4']


class CategoryIncludeFromArticleRecursive4(TypedDict, total=False):
    """Relational arguments for Article"""

    

class CategoryArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    
    

class FindManyCategoryArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class CategoryToArticleIncludeFromArticle(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive1']
    category: Union[bool, 'CategoryArgsFromArticleRecursive1']


class CategoryToArticleIncludeFromArticleRecursive1(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive2']
    category: Union[bool, 'CategoryArgsFromArticleRecursive2']


class CategoryToArticleIncludeFromArticleRecursive2(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive3']
    category: Union[bool, 'CategoryArgsFromArticleRecursive3']


class CategoryToArticleIncludeFromArticleRecursive3(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive4']
    category: Union[bool, 'CategoryArgsFromArticleRecursive4']


class CategoryToArticleIncludeFromArticleRecursive4(TypedDict, total=False):
    """Relational arguments for Article"""

    

class CategoryToArticleArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class CategoryToArticleArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class CategoryToArticleArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class CategoryToArticleArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class CategoryToArticleArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    
    

class FindManyCategoryToArticleArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class FindManyCategoryToArticleArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class FindManyCategoryToArticleArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class FindManyCategoryToArticleArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class FindManyCategoryToArticleArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    
    

class CommentIncludeFromArticle(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive1']
    user: Union[bool, 'UserArgsFromArticleRecursive1']


class CommentIncludeFromArticleRecursive1(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive2']
    user: Union[bool, 'UserArgsFromArticleRecursive2']


class CommentIncludeFromArticleRecursive2(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive3']
    user: Union[bool, 'UserArgsFromArticleRecursive3']


class CommentIncludeFromArticleRecursive3(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive4']
    user: Union[bool, 'UserArgsFromArticleRecursive4']


class CommentIncludeFromArticleRecursive4(TypedDict, total=False):
    """Relational arguments for Article"""

    

class CommentArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    
    

class FindManyCommentArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromArticle(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive1']
    user: Union[bool, 'UserArgsFromArticleRecursive1']


class LikeIncludeFromArticleRecursive1(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive2']
    user: Union[bool, 'UserArgsFromArticleRecursive2']


class LikeIncludeFromArticleRecursive2(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive3']
    user: Union[bool, 'UserArgsFromArticleRecursive3']


class LikeIncludeFromArticleRecursive3(TypedDict, total=False):
    """Relational arguments for Article"""
    article: Union[bool, 'ArticleArgsFromArticleRecursive4']
    user: Union[bool, 'UserArgsFromArticleRecursive4']


class LikeIncludeFromArticleRecursive4(TypedDict, total=False):
    """Relational arguments for Article"""

    

class LikeArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    
    

class FindManyLikeArgsFromArticle(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromArticleRecursive1(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromArticleRecursive2(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromArticleRecursive3(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromArticleRecursive4(TypedDict, total=False):
    """Arguments for Article"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyArticleArgs = FindManyArticleArgsFromArticle
FindFirstArticleArgs = FindManyArticleArgsFromArticle


    

class ArticleWhereInput(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    views: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    categories: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['ArticleWhereInputRecursive1', List['ArticleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ArticleWhereInputRecursive1']
    OR: List['ArticleWhereInputRecursive1']
    NOT: List['ArticleWhereInputRecursive1']


class ArticleWhereInputRecursive1(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    views: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    categories: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['ArticleWhereInputRecursive2', List['ArticleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ArticleWhereInputRecursive2']
    OR: List['ArticleWhereInputRecursive2']
    NOT: List['ArticleWhereInputRecursive2']


class ArticleWhereInputRecursive2(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    views: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    categories: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['ArticleWhereInputRecursive3', List['ArticleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ArticleWhereInputRecursive3']
    OR: List['ArticleWhereInputRecursive3']
    NOT: List['ArticleWhereInputRecursive3']


class ArticleWhereInputRecursive3(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    views: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    categories: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['ArticleWhereInputRecursive4', List['ArticleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ArticleWhereInputRecursive4']
    OR: List['ArticleWhereInputRecursive4']
    NOT: List['ArticleWhereInputRecursive4']


class ArticleWhereInputRecursive4(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    views: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    categories: 'CategoryToArticleListRelationFilter'



# aggregate Article types


    

class ArticleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    views: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ArticleScalarWhereWithAggregatesInputRecursive1']
    OR: List['ArticleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ArticleScalarWhereWithAggregatesInputRecursive1']


class ArticleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    views: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ArticleScalarWhereWithAggregatesInputRecursive2']
    OR: List['ArticleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ArticleScalarWhereWithAggregatesInputRecursive2']


class ArticleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    views: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ArticleScalarWhereWithAggregatesInputRecursive3']
    OR: List['ArticleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ArticleScalarWhereWithAggregatesInputRecursive3']


class ArticleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    views: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ArticleScalarWhereWithAggregatesInputRecursive4']
    OR: List['ArticleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ArticleScalarWhereWithAggregatesInputRecursive4']


class ArticleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Article arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    views: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']



class ArticleGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    content: _str
    views: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _int
    _sum: 'ArticleSumAggregateOutput'
    _avg: 'ArticleAvgAggregateOutput'
    _min: 'ArticleMinAggregateOutput'
    _max: 'ArticleMaxAggregateOutput'
    _count: 'ArticleCountAggregateOutput'


class ArticleAvgAggregateOutput(TypedDict, total=False):
    """Article output for aggregating averages"""
    id: float
    views: float
    userId: float


class ArticleSumAggregateOutput(TypedDict, total=False):
    """Article output for aggregating sums"""
    id: _int
    views: _int
    userId: _int


class ArticleScalarAggregateOutput(TypedDict, total=False):
    """Article output including scalar fields"""
    id: _int
    title: _str
    content: _str
    views: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _int


ArticleMinAggregateOutput = ArticleScalarAggregateOutput
ArticleMaxAggregateOutput = ArticleScalarAggregateOutput


class ArticleMaxAggregateInput(TypedDict, total=False):
    """Article input for aggregating by max"""
    id: bool
    title: bool
    content: bool
    views: bool
    createdAt: bool
    updatedAt: bool
    userId: bool


class ArticleMinAggregateInput(TypedDict, total=False):
    """Article input for aggregating by min"""
    id: bool
    title: bool
    content: bool
    views: bool
    createdAt: bool
    updatedAt: bool
    userId: bool


class ArticleNumberAggregateInput(TypedDict, total=False):
    """Article input for aggregating numbers"""
    id: bool
    views: bool
    userId: bool


ArticleAvgAggregateInput = ArticleNumberAggregateInput
ArticleSumAggregateInput = ArticleNumberAggregateInput


ArticleCountAggregateInput = TypedDict(
    'ArticleCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'content': bool,
        'views': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

ArticleCountAggregateOutput = TypedDict(
    'ArticleCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'content': int,
        'views': int,
        'createdAt': int,
        'updatedAt': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


ArticleKeys = Literal[
    'id',
    'title',
    'content',
    'views',
    'createdAt',
    'updatedAt',
    'userId',
    'user',
    'comments',
    'likes',
    'categories',
]
ArticleScalarFieldKeys = Literal[
    'id',
    'title',
    'content',
    'views',
    'createdAt',
    'updatedAt',
    'userId',
]
ArticleScalarFieldKeysT = TypeVar('ArticleScalarFieldKeysT', bound=ArticleScalarFieldKeys)

ArticleRelationalFieldKeys = Literal[
        'user',
        'comments',
        'likes',
        'categories',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: _int
    articles: 'CategoryToArticleCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: _int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: _str

class CategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CategoryCreateWithoutRelationsInput'
    where: 'CategoryWhereUniqueInput'

class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]
    connect_or_create: Union['CategoryConnectOrCreateWithoutRelationsInput', List['CategoryConnectOrCreateWithoutRelationsInput']]

_CategoryWhereUnique_id_Input = TypedDict(
    '_CategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CategoryWhereUniqueInput = _CategoryWhereUnique_id_Input


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    articles: 'CategoryToArticleUpdateManyWithoutRelationsInput'


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    connect_or_create: List['CategoryConnectOrCreateWithoutRelationsInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    connect_or_create: 'CategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Category_id_OrderByInput = TypedDict(
    '_Category_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Category_name_OrderByInput = TypedDict(
    '_Category_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Category_RelevanceInner = TypedDict(
    '_Category_RelevanceInner',
    {
        'fields': 'List[CategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Category_RelevanceOrderByInput = TypedDict(
    '_Category_RelevanceOrderByInput',
    {
        '_relevance': '_Category_RelevanceInner',
    },
    total=True
)

CategoryOrderByInput = Union[
    '_Category_id_OrderByInput',
    '_Category_name_OrderByInput',
    '_Category_RelevanceOrderByInput',
]



# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategory']


    

class UserIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive1']


class UserIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive2']


class UserIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive3']


class UserIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive4']


class UserIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ArticleIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive1']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive1']


class ArticleIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive2']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive2']


class ArticleIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive3']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive3']


class ArticleIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryRecursive4']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive4']


class ArticleIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ArticleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ArticleIncludeFromArticleRecursive1'


class ArticleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ArticleIncludeFromArticleRecursive2'


class ArticleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ArticleIncludeFromArticleRecursive3'


class ArticleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ArticleIncludeFromArticleRecursive4'


class ArticleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyArticleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive1'


class FindManyArticleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive2'


class FindManyArticleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive3'


class FindManyArticleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive4'


class FindManyArticleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class CategoryToArticleIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive1']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive1']


class CategoryToArticleIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive2']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive2']


class CategoryToArticleIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive3']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive3']


class CategoryToArticleIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive4']
    category: Union[bool, 'CategoryArgsFromCategoryRecursive4']


class CategoryToArticleIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryToArticleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class CategoryToArticleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class CategoryToArticleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class CategoryToArticleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class CategoryToArticleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryToArticleArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class FindManyCategoryToArticleArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class FindManyCategoryToArticleArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class FindManyCategoryToArticleArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class FindManyCategoryToArticleArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    
    

class CommentIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive1']
    user: Union[bool, 'UserArgsFromCategoryRecursive1']


class CommentIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive2']
    user: Union[bool, 'UserArgsFromCategoryRecursive2']


class CommentIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive3']
    user: Union[bool, 'UserArgsFromCategoryRecursive3']


class CommentIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive4']
    user: Union[bool, 'UserArgsFromCategoryRecursive4']


class CommentIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CommentArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCommentArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive1']
    user: Union[bool, 'UserArgsFromCategoryRecursive1']


class LikeIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive2']
    user: Union[bool, 'UserArgsFromCategoryRecursive2']


class LikeIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive3']
    user: Union[bool, 'UserArgsFromCategoryRecursive3']


class LikeIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    article: Union[bool, 'ArticleArgsFromCategoryRecursive4']
    user: Union[bool, 'UserArgsFromCategoryRecursive4']


class LikeIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class LikeArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyLikeArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    articles: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive1', List['CategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    articles: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive2', List['CategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    articles: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive3', List['CategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    articles: 'CategoryToArticleListRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryWhereInputRecursive4', List['CategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    articles: 'CategoryToArticleListRelationFilter'



# aggregate Category types


    

class CategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive1']


class CategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive2']


class CategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive3']


class CategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['CategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CategoryScalarWhereWithAggregatesInputRecursive4']


class CategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class CategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'CategorySumAggregateOutput'
    _avg: 'CategoryAvgAggregateOutput'
    _min: 'CategoryMinAggregateOutput'
    _max: 'CategoryMaxAggregateOutput'
    _count: 'CategoryCountAggregateOutput'


class CategoryAvgAggregateOutput(TypedDict, total=False):
    """Category output for aggregating averages"""
    id: float


class CategorySumAggregateOutput(TypedDict, total=False):
    """Category output for aggregating sums"""
    id: _int


class CategoryScalarAggregateOutput(TypedDict, total=False):
    """Category output including scalar fields"""
    id: _int
    name: _str


CategoryMinAggregateOutput = CategoryScalarAggregateOutput
CategoryMaxAggregateOutput = CategoryScalarAggregateOutput


class CategoryMaxAggregateInput(TypedDict, total=False):
    """Category input for aggregating by max"""
    id: bool
    name: bool


class CategoryMinAggregateInput(TypedDict, total=False):
    """Category input for aggregating by min"""
    id: bool
    name: bool


class CategoryNumberAggregateInput(TypedDict, total=False):
    """Category input for aggregating numbers"""
    id: bool


CategoryAvgAggregateInput = CategoryNumberAggregateInput
CategorySumAggregateInput = CategoryNumberAggregateInput


CategoryCountAggregateInput = TypedDict(
    'CategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

CategoryCountAggregateOutput = TypedDict(
    'CategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


CategoryKeys = Literal[
    'id',
    'name',
    'articles',
]
CategoryScalarFieldKeys = Literal[
    'id',
    'name',
]
CategoryScalarFieldKeysT = TypeVar('CategoryScalarFieldKeysT', bound=CategoryScalarFieldKeys)

CategoryRelationalFieldKeys = Literal[
        'articles',
    ]

# CategoryToArticle types

class CategoryToArticleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the CategoryToArticle create method"""
    articleId: _int
    categoryId: _int
    article: 'ArticleCreateNestedWithoutRelationsInput'
    category: 'CategoryCreateNestedWithoutRelationsInput'


class CategoryToArticleCreateInput(CategoryToArticleOptionalCreateInput):
    """Required arguments to the CategoryToArticle create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryToArticleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the CategoryToArticle create method, without relations"""
    articleId: _int
    categoryId: _int


class CategoryToArticleCreateWithoutRelationsInput(CategoryToArticleOptionalCreateWithoutRelationsInput):
    """Required arguments to the CategoryToArticle create method, without relations"""

class CategoryToArticleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CategoryToArticleCreateWithoutRelationsInput'
    where: 'CategoryToArticleWhereUniqueInput'

class CategoryToArticleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryToArticleCreateWithoutRelationsInput'
    connect: 'CategoryToArticleWhereUniqueInput'
    connect_or_create: 'CategoryToArticleConnectOrCreateWithoutRelationsInput'


class CategoryToArticleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryToArticleCreateWithoutRelationsInput', List['CategoryToArticleCreateWithoutRelationsInput']]
    connect: Union['CategoryToArticleWhereUniqueInput', List['CategoryToArticleWhereUniqueInput']]
    connect_or_create: Union['CategoryToArticleConnectOrCreateWithoutRelationsInput', List['CategoryToArticleConnectOrCreateWithoutRelationsInput']]

_CategoryToArticleCompoundPrimaryKeyInner = TypedDict(
    '_CategoryToArticleCompoundPrimaryKeyInner',
    {
        'articleId': '_int',
        'categoryId': '_int',
    },
    total=True
)

_CategoryToArticleCompoundPrimaryKey = TypedDict(
    '_CategoryToArticleCompoundPrimaryKey',
    {
        'articleId_categoryId': '_CategoryToArticleCompoundPrimaryKeyInner',
    },
    total=True
)

CategoryToArticleWhereUniqueInput = _CategoryToArticleCompoundPrimaryKey


class CategoryToArticleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    article: 'ArticleUpdateOneWithoutRelationsInput'
    category: 'CategoryUpdateOneWithoutRelationsInput'


class CategoryToArticleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class CategoryToArticleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryToArticleCreateWithoutRelationsInput']
    connect: List['CategoryToArticleWhereUniqueInput']
    connect_or_create: List['CategoryToArticleConnectOrCreateWithoutRelationsInput']
    set: List['CategoryToArticleWhereUniqueInput']
    disconnect: List['CategoryToArticleWhereUniqueInput']
    delete: List['CategoryToArticleWhereUniqueInput']

    # TODO
    # update: List['CategoryToArticleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryToArticleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryToArticleScalarWhereInput']
    # upsert: List['CategoryToArticleUpserteWithWhereUniqueWithoutRelationsInput']


class CategoryToArticleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryToArticleCreateWithoutRelationsInput'
    connect: 'CategoryToArticleWhereUniqueInput'
    connect_or_create: 'CategoryToArticleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryToArticleUpdateInput'
    # upsert: 'CategoryToArticleUpsertWithoutRelationsInput'


class CategoryToArticleUpsertInput(TypedDict):
    create: 'CategoryToArticleCreateInput'
    update: 'CategoryToArticleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_CategoryToArticle_articleId_OrderByInput = TypedDict(
    '_CategoryToArticle_articleId_OrderByInput',
    {
        'articleId': 'SortOrder',
    },
    total=True
)

_CategoryToArticle_categoryId_OrderByInput = TypedDict(
    '_CategoryToArticle_categoryId_OrderByInput',
    {
        'categoryId': 'SortOrder',
    },
    total=True
)

_CategoryToArticle_RelevanceInner = TypedDict(
    '_CategoryToArticle_RelevanceInner',
    {
        'fields': 'List[CategoryToArticleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_CategoryToArticle_RelevanceOrderByInput = TypedDict(
    '_CategoryToArticle_RelevanceOrderByInput',
    {
        '_relevance': '_CategoryToArticle_RelevanceInner',
    },
    total=True
)

CategoryToArticleOrderByInput = Union[
    '_CategoryToArticle_articleId_OrderByInput',
    '_CategoryToArticle_categoryId_OrderByInput',
    '_CategoryToArticle_RelevanceOrderByInput',
]



# recursive CategoryToArticle types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CategoryToArticleRelationFilter = TypedDict(
    'CategoryToArticleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryToArticleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryToArticleInclude(TypedDict, total=False):
    """CategoryToArticle relational arguments"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticle']
    category: Union[bool, 'CategoryArgsFromCategoryToArticle']


    

class UserIncludeFromCategoryToArticle(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryToArticleRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive1']


class UserIncludeFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryToArticleRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive2']


class UserIncludeFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryToArticleRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive3']


class UserIncludeFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyArticleArgsFromCategoryToArticleRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive4']


class UserIncludeFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""

    

class UserArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    
    

class FindManyUserArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ArticleIncludeFromCategoryToArticle(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive1']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive1']


class ArticleIncludeFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive2']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive2']


class ArticleIncludeFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive3']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive3']


class ArticleIncludeFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCategoryToArticleRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCategoryToArticleRecursive4']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive4']


class ArticleIncludeFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""

    

class ArticleArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'ArticleIncludeFromArticleRecursive1'


class ArticleArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'ArticleIncludeFromArticleRecursive2'


class ArticleArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'ArticleIncludeFromArticleRecursive3'


class ArticleArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'ArticleIncludeFromArticleRecursive4'


class ArticleArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    
    

class FindManyArticleArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive1'


class FindManyArticleArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive2'


class FindManyArticleArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive3'


class FindManyArticleArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive4'


class FindManyArticleArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    
    

class CategoryIncludeFromCategoryToArticle(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive1']


class CategoryIncludeFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive2']


class CategoryIncludeFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive3']


class CategoryIncludeFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCategoryToArticleRecursive4']


class CategoryIncludeFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""

    

class CategoryArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    
    

class FindManyCategoryArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class CategoryToArticleIncludeFromCategoryToArticle(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive1']
    category: Union[bool, 'CategoryArgsFromCategoryToArticleRecursive1']


class CategoryToArticleIncludeFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive2']
    category: Union[bool, 'CategoryArgsFromCategoryToArticleRecursive2']


class CategoryToArticleIncludeFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive3']
    category: Union[bool, 'CategoryArgsFromCategoryToArticleRecursive3']


class CategoryToArticleIncludeFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive4']
    category: Union[bool, 'CategoryArgsFromCategoryToArticleRecursive4']


class CategoryToArticleIncludeFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""

    

class CategoryToArticleArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class CategoryToArticleArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class CategoryToArticleArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class CategoryToArticleArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class CategoryToArticleArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    
    

class FindManyCategoryToArticleArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class FindManyCategoryToArticleArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class FindManyCategoryToArticleArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class FindManyCategoryToArticleArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class FindManyCategoryToArticleArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    
    

class CommentIncludeFromCategoryToArticle(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive1']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive1']


class CommentIncludeFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive2']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive2']


class CommentIncludeFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive3']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive3']


class CommentIncludeFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive4']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive4']


class CommentIncludeFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""

    

class CommentArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    
    

class FindManyCommentArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromCategoryToArticle(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive1']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive1']


class LikeIncludeFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive2']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive2']


class LikeIncludeFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive3']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive3']


class LikeIncludeFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""
    article: Union[bool, 'ArticleArgsFromCategoryToArticleRecursive4']
    user: Union[bool, 'UserArgsFromCategoryToArticleRecursive4']


class LikeIncludeFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Relational arguments for CategoryToArticle"""

    

class LikeArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    
    

class FindManyLikeArgsFromCategoryToArticle(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromCategoryToArticleRecursive1(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromCategoryToArticleRecursive2(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromCategoryToArticleRecursive3(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromCategoryToArticleRecursive4(TypedDict, total=False):
    """Arguments for CategoryToArticle"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyCategoryToArticleArgs = FindManyCategoryToArticleArgsFromCategoryToArticle
FindFirstCategoryToArticleArgs = FindManyCategoryToArticleArgsFromCategoryToArticle


    

class CategoryToArticleWhereInput(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    category: 'CategoryRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryToArticleWhereInputRecursive1', List['CategoryToArticleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CategoryToArticleWhereInputRecursive1']
    OR: List['CategoryToArticleWhereInputRecursive1']
    NOT: List['CategoryToArticleWhereInputRecursive1']


class CategoryToArticleWhereInputRecursive1(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    category: 'CategoryRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryToArticleWhereInputRecursive2', List['CategoryToArticleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CategoryToArticleWhereInputRecursive2']
    OR: List['CategoryToArticleWhereInputRecursive2']
    NOT: List['CategoryToArticleWhereInputRecursive2']


class CategoryToArticleWhereInputRecursive2(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    category: 'CategoryRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryToArticleWhereInputRecursive3', List['CategoryToArticleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CategoryToArticleWhereInputRecursive3']
    OR: List['CategoryToArticleWhereInputRecursive3']
    NOT: List['CategoryToArticleWhereInputRecursive3']


class CategoryToArticleWhereInputRecursive3(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    category: 'CategoryRelationFilter'

    # should be noted that AND and NOT should be Union['CategoryToArticleWhereInputRecursive4', List['CategoryToArticleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CategoryToArticleWhereInputRecursive4']
    OR: List['CategoryToArticleWhereInputRecursive4']
    NOT: List['CategoryToArticleWhereInputRecursive4']


class CategoryToArticleWhereInputRecursive4(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntFilter']
    categoryId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    category: 'CategoryRelationFilter'



# aggregate CategoryToArticle types


    

class CategoryToArticleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive1']
    OR: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive1']


class CategoryToArticleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive2']
    OR: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive2']


class CategoryToArticleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive3']
    OR: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive3']


class CategoryToArticleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive4']
    OR: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CategoryToArticleScalarWhereWithAggregatesInputRecursive4']


class CategoryToArticleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """CategoryToArticle arguments for searching"""
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    categoryId: Union[_int, 'types.IntWithAggregatesFilter']



class CategoryToArticleGroupByOutput(TypedDict, total=False):
    articleId: _int
    categoryId: _int
    _sum: 'CategoryToArticleSumAggregateOutput'
    _avg: 'CategoryToArticleAvgAggregateOutput'
    _min: 'CategoryToArticleMinAggregateOutput'
    _max: 'CategoryToArticleMaxAggregateOutput'
    _count: 'CategoryToArticleCountAggregateOutput'


class CategoryToArticleAvgAggregateOutput(TypedDict, total=False):
    """CategoryToArticle output for aggregating averages"""
    articleId: float
    categoryId: float


class CategoryToArticleSumAggregateOutput(TypedDict, total=False):
    """CategoryToArticle output for aggregating sums"""
    articleId: _int
    categoryId: _int


class CategoryToArticleScalarAggregateOutput(TypedDict, total=False):
    """CategoryToArticle output including scalar fields"""
    articleId: _int
    categoryId: _int


CategoryToArticleMinAggregateOutput = CategoryToArticleScalarAggregateOutput
CategoryToArticleMaxAggregateOutput = CategoryToArticleScalarAggregateOutput


class CategoryToArticleMaxAggregateInput(TypedDict, total=False):
    """CategoryToArticle input for aggregating by max"""
    articleId: bool
    categoryId: bool


class CategoryToArticleMinAggregateInput(TypedDict, total=False):
    """CategoryToArticle input for aggregating by min"""
    articleId: bool
    categoryId: bool


class CategoryToArticleNumberAggregateInput(TypedDict, total=False):
    """CategoryToArticle input for aggregating numbers"""
    articleId: bool
    categoryId: bool


CategoryToArticleAvgAggregateInput = CategoryToArticleNumberAggregateInput
CategoryToArticleSumAggregateInput = CategoryToArticleNumberAggregateInput


CategoryToArticleCountAggregateInput = TypedDict(
    'CategoryToArticleCountAggregateInput',
    {
        'articleId': bool,
        'categoryId': bool,
        '_all': bool,
    },
    total=False,
)

CategoryToArticleCountAggregateOutput = TypedDict(
    'CategoryToArticleCountAggregateOutput',
    {
        'articleId': int,
        'categoryId': int,
        '_all': int,
    },
    total=False,
)


CategoryToArticleKeys = Literal[
    'articleId',
    'categoryId',
    'article',
    'category',
]
CategoryToArticleScalarFieldKeys = Literal[
    'articleId',
    'categoryId',
]
CategoryToArticleScalarFieldKeysT = TypeVar('CategoryToArticleScalarFieldKeysT', bound=CategoryToArticleScalarFieldKeys)

CategoryToArticleRelationalFieldKeys = Literal[
        'article',
        'category',
    ]

# Comment types

class CommentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Comment create method"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int
    article: 'ArticleCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'


class CommentCreateInput(CommentOptionalCreateInput):
    """Required arguments to the Comment create method"""
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CommentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Comment create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int


class CommentCreateWithoutRelationsInput(CommentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Comment create method, without relations"""
    content: _str

class CommentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CommentCreateWithoutRelationsInput'
    where: 'CommentWhereUniqueInput'

class CommentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CommentCreateWithoutRelationsInput'
    connect: 'CommentWhereUniqueInput'
    connect_or_create: 'CommentConnectOrCreateWithoutRelationsInput'


class CommentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CommentCreateWithoutRelationsInput', List['CommentCreateWithoutRelationsInput']]
    connect: Union['CommentWhereUniqueInput', List['CommentWhereUniqueInput']]
    connect_or_create: Union['CommentConnectOrCreateWithoutRelationsInput', List['CommentConnectOrCreateWithoutRelationsInput']]

_CommentWhereUnique_id_Input = TypedDict(
    '_CommentWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CommentWhereUniqueInput = _CommentWhereUnique_id_Input


class CommentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    content: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    article: 'ArticleUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class CommentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    content: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CommentCreateWithoutRelationsInput']
    connect: List['CommentWhereUniqueInput']
    connect_or_create: List['CommentConnectOrCreateWithoutRelationsInput']
    set: List['CommentWhereUniqueInput']
    disconnect: List['CommentWhereUniqueInput']
    delete: List['CommentWhereUniqueInput']

    # TODO
    # update: List['CommentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CommentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CommentScalarWhereInput']
    # upsert: List['CommentUpserteWithWhereUniqueWithoutRelationsInput']


class CommentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CommentCreateWithoutRelationsInput'
    connect: 'CommentWhereUniqueInput'
    connect_or_create: 'CommentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CommentUpdateInput'
    # upsert: 'CommentUpsertWithoutRelationsInput'


class CommentUpsertInput(TypedDict):
    create: 'CommentCreateInput'
    update: 'CommentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Comment_id_OrderByInput = TypedDict(
    '_Comment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Comment_content_OrderByInput = TypedDict(
    '_Comment_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Comment_createdAt_OrderByInput = TypedDict(
    '_Comment_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Comment_updatedAt_OrderByInput = TypedDict(
    '_Comment_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Comment_articleId_OrderByInput = TypedDict(
    '_Comment_articleId_OrderByInput',
    {
        'articleId': 'SortOrder',
    },
    total=True
)

_Comment_userId_OrderByInput = TypedDict(
    '_Comment_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Comment_RelevanceInner = TypedDict(
    '_Comment_RelevanceInner',
    {
        'fields': 'List[CommentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Comment_RelevanceOrderByInput = TypedDict(
    '_Comment_RelevanceOrderByInput',
    {
        '_relevance': '_Comment_RelevanceInner',
    },
    total=True
)

CommentOrderByInput = Union[
    '_Comment_id_OrderByInput',
    '_Comment_content_OrderByInput',
    '_Comment_createdAt_OrderByInput',
    '_Comment_updatedAt_OrderByInput',
    '_Comment_articleId_OrderByInput',
    '_Comment_userId_OrderByInput',
    '_Comment_RelevanceOrderByInput',
]



# recursive Comment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CommentRelationFilter = TypedDict(
    'CommentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CommentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CommentInclude(TypedDict, total=False):
    """Comment relational arguments"""
    article: Union[bool, 'ArticleArgsFromComment']
    user: Union[bool, 'UserArgsFromComment']


    

class UserIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyArticleArgsFromCommentRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive1']


class UserIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyArticleArgsFromCommentRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive2']


class UserIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyArticleArgsFromCommentRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive3']


class UserIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyArticleArgsFromCommentRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive4']


class UserIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class UserArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyUserArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ArticleIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive1']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive1']


class ArticleIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive2']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive2']


class ArticleIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive3']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive3']


class ArticleIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive4']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive4']


class ArticleIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class ArticleArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'ArticleIncludeFromArticleRecursive1'


class ArticleArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'ArticleIncludeFromArticleRecursive2'


class ArticleArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'ArticleIncludeFromArticleRecursive3'


class ArticleArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'ArticleIncludeFromArticleRecursive4'


class ArticleArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyArticleArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive1'


class FindManyArticleArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive2'


class FindManyArticleArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive3'


class FindManyArticleArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive4'


class FindManyArticleArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    
    

class CategoryIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive1']


class CategoryIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive2']


class CategoryIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive3']


class CategoryIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromCommentRecursive4']


class CategoryIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class CategoryArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyCategoryArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class CategoryToArticleIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive1']
    category: Union[bool, 'CategoryArgsFromCommentRecursive1']


class CategoryToArticleIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive2']
    category: Union[bool, 'CategoryArgsFromCommentRecursive2']


class CategoryToArticleIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive3']
    category: Union[bool, 'CategoryArgsFromCommentRecursive3']


class CategoryToArticleIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive4']
    category: Union[bool, 'CategoryArgsFromCommentRecursive4']


class CategoryToArticleIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class CategoryToArticleArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class CategoryToArticleArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class CategoryToArticleArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class CategoryToArticleArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class CategoryToArticleArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyCategoryToArticleArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class FindManyCategoryToArticleArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class FindManyCategoryToArticleArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class FindManyCategoryToArticleArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class FindManyCategoryToArticleArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    
    

class CommentIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive1']
    user: Union[bool, 'UserArgsFromCommentRecursive1']


class CommentIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive2']
    user: Union[bool, 'UserArgsFromCommentRecursive2']


class CommentIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive3']
    user: Union[bool, 'UserArgsFromCommentRecursive3']


class CommentIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive4']
    user: Union[bool, 'UserArgsFromCommentRecursive4']


class CommentIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class CommentArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyCommentArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive1']
    user: Union[bool, 'UserArgsFromCommentRecursive1']


class LikeIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive2']
    user: Union[bool, 'UserArgsFromCommentRecursive2']


class LikeIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive3']
    user: Union[bool, 'UserArgsFromCommentRecursive3']


class LikeIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    article: Union[bool, 'ArticleArgsFromCommentRecursive4']
    user: Union[bool, 'UserArgsFromCommentRecursive4']


class LikeIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class LikeArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyLikeArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyCommentArgs = FindManyCommentArgsFromComment
FindFirstCommentArgs = FindManyCommentArgsFromComment


    

class CommentWhereInput(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive1', List['CommentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive1']
    OR: List['CommentWhereInputRecursive1']
    NOT: List['CommentWhereInputRecursive1']


class CommentWhereInputRecursive1(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive2', List['CommentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive2']
    OR: List['CommentWhereInputRecursive2']
    NOT: List['CommentWhereInputRecursive2']


class CommentWhereInputRecursive2(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive3', List['CommentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive3']
    OR: List['CommentWhereInputRecursive3']
    NOT: List['CommentWhereInputRecursive3']


class CommentWhereInputRecursive3(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive4', List['CommentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive4']
    OR: List['CommentWhereInputRecursive4']
    NOT: List['CommentWhereInputRecursive4']


class CommentWhereInputRecursive4(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'



# aggregate Comment types


    

class CommentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive1']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive1']


class CommentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive2']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive2']


class CommentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive3']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive3']


class CommentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive4']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive4']


class CommentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']



class CommentGroupByOutput(TypedDict, total=False):
    id: _int
    content: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int
    _sum: 'CommentSumAggregateOutput'
    _avg: 'CommentAvgAggregateOutput'
    _min: 'CommentMinAggregateOutput'
    _max: 'CommentMaxAggregateOutput'
    _count: 'CommentCountAggregateOutput'


class CommentAvgAggregateOutput(TypedDict, total=False):
    """Comment output for aggregating averages"""
    id: float
    articleId: float
    userId: float


class CommentSumAggregateOutput(TypedDict, total=False):
    """Comment output for aggregating sums"""
    id: _int
    articleId: _int
    userId: _int


class CommentScalarAggregateOutput(TypedDict, total=False):
    """Comment output including scalar fields"""
    id: _int
    content: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int


CommentMinAggregateOutput = CommentScalarAggregateOutput
CommentMaxAggregateOutput = CommentScalarAggregateOutput


class CommentMaxAggregateInput(TypedDict, total=False):
    """Comment input for aggregating by max"""
    id: bool
    content: bool
    createdAt: bool
    updatedAt: bool
    articleId: bool
    userId: bool


class CommentMinAggregateInput(TypedDict, total=False):
    """Comment input for aggregating by min"""
    id: bool
    content: bool
    createdAt: bool
    updatedAt: bool
    articleId: bool
    userId: bool


class CommentNumberAggregateInput(TypedDict, total=False):
    """Comment input for aggregating numbers"""
    id: bool
    articleId: bool
    userId: bool


CommentAvgAggregateInput = CommentNumberAggregateInput
CommentSumAggregateInput = CommentNumberAggregateInput


CommentCountAggregateInput = TypedDict(
    'CommentCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'articleId': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

CommentCountAggregateOutput = TypedDict(
    'CommentCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'createdAt': int,
        'updatedAt': int,
        'articleId': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


CommentKeys = Literal[
    'id',
    'content',
    'createdAt',
    'updatedAt',
    'articleId',
    'userId',
    'article',
    'user',
]
CommentScalarFieldKeys = Literal[
    'id',
    'content',
    'createdAt',
    'updatedAt',
    'articleId',
    'userId',
]
CommentScalarFieldKeysT = TypeVar('CommentScalarFieldKeysT', bound=CommentScalarFieldKeys)

CommentRelationalFieldKeys = Literal[
        'article',
        'user',
    ]

# Like types

class LikeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Like create method"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int
    article: 'ArticleCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'


class LikeCreateInput(LikeOptionalCreateInput):
    """Required arguments to the Like create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LikeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Like create method, without relations"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int


class LikeCreateWithoutRelationsInput(LikeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Like create method, without relations"""

class LikeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LikeCreateWithoutRelationsInput'
    where: 'LikeWhereUniqueInput'

class LikeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'


class LikeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LikeCreateWithoutRelationsInput', List['LikeCreateWithoutRelationsInput']]
    connect: Union['LikeWhereUniqueInput', List['LikeWhereUniqueInput']]
    connect_or_create: Union['LikeConnectOrCreateWithoutRelationsInput', List['LikeConnectOrCreateWithoutRelationsInput']]

_LikeCompoundPrimaryKeyInner = TypedDict(
    '_LikeCompoundPrimaryKeyInner',
    {
        'articleId': '_int',
        'userId': '_int',
    },
    total=True
)

_LikeCompoundPrimaryKey = TypedDict(
    '_LikeCompoundPrimaryKey',
    {
        'articleId_userId': '_LikeCompoundPrimaryKeyInner',
    },
    total=True
)

LikeWhereUniqueInput = _LikeCompoundPrimaryKey


class LikeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    article: 'ArticleUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class LikeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LikeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LikeCreateWithoutRelationsInput']
    connect: List['LikeWhereUniqueInput']
    connect_or_create: List['LikeConnectOrCreateWithoutRelationsInput']
    set: List['LikeWhereUniqueInput']
    disconnect: List['LikeWhereUniqueInput']
    delete: List['LikeWhereUniqueInput']

    # TODO
    # update: List['LikeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LikeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LikeScalarWhereInput']
    # upsert: List['LikeUpserteWithWhereUniqueWithoutRelationsInput']


class LikeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LikeUpdateInput'
    # upsert: 'LikeUpsertWithoutRelationsInput'


class LikeUpsertInput(TypedDict):
    create: 'LikeCreateInput'
    update: 'LikeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Like_createdAt_OrderByInput = TypedDict(
    '_Like_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Like_updatedAt_OrderByInput = TypedDict(
    '_Like_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Like_articleId_OrderByInput = TypedDict(
    '_Like_articleId_OrderByInput',
    {
        'articleId': 'SortOrder',
    },
    total=True
)

_Like_userId_OrderByInput = TypedDict(
    '_Like_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Like_RelevanceInner = TypedDict(
    '_Like_RelevanceInner',
    {
        'fields': 'List[LikeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Like_RelevanceOrderByInput = TypedDict(
    '_Like_RelevanceOrderByInput',
    {
        '_relevance': '_Like_RelevanceInner',
    },
    total=True
)

LikeOrderByInput = Union[
    '_Like_createdAt_OrderByInput',
    '_Like_updatedAt_OrderByInput',
    '_Like_articleId_OrderByInput',
    '_Like_userId_OrderByInput',
    '_Like_RelevanceOrderByInput',
]



# recursive Like types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LikeRelationFilter = TypedDict(
    'LikeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LikeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LikeInclude(TypedDict, total=False):
    """Like relational arguments"""
    article: Union[bool, 'ArticleArgsFromLike']
    user: Union[bool, 'UserArgsFromLike']


    

class UserIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyArticleArgsFromLikeRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']


class UserIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyArticleArgsFromLikeRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']


class UserIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyArticleArgsFromLikeRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']


class UserIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyArticleArgsFromLikeRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']


class UserIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class UserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyUserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ArticleIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive1']


class ArticleIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive2']


class ArticleIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive3']


class ArticleIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']
    categories: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive4']


class ArticleIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class ArticleArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ArticleIncludeFromArticleRecursive1'


class ArticleArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ArticleIncludeFromArticleRecursive2'


class ArticleArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ArticleIncludeFromArticleRecursive3'


class ArticleArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ArticleIncludeFromArticleRecursive4'


class ArticleArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyArticleArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive1'


class FindManyArticleArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive2'


class FindManyArticleArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive3'


class FindManyArticleArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    include: 'ArticleIncludeFromArticleRecursive4'


class FindManyArticleArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ArticleOrderByInput', List['ArticleOrderByInput']]
    where: 'ArticleWhereInput'
    cursor: 'ArticleWhereUniqueInput'
    distinct: List['ArticleScalarFieldKeys']
    
    

class CategoryIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive1']


class CategoryIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive2']


class CategoryIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive3']


class CategoryIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    articles: Union[bool, 'FindManyCategoryToArticleArgsFromLikeRecursive4']


class CategoryIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class CategoryArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyCategoryArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    distinct: List['CategoryScalarFieldKeys']
    
    

class CategoryToArticleIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive1']
    category: Union[bool, 'CategoryArgsFromLikeRecursive1']


class CategoryToArticleIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive2']
    category: Union[bool, 'CategoryArgsFromLikeRecursive2']


class CategoryToArticleIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive3']
    category: Union[bool, 'CategoryArgsFromLikeRecursive3']


class CategoryToArticleIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive4']
    category: Union[bool, 'CategoryArgsFromLikeRecursive4']


class CategoryToArticleIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class CategoryToArticleArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class CategoryToArticleArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class CategoryToArticleArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class CategoryToArticleArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class CategoryToArticleArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyCategoryToArticleArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive1'


class FindManyCategoryToArticleArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive2'


class FindManyCategoryToArticleArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive3'


class FindManyCategoryToArticleArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    include: 'CategoryToArticleIncludeFromCategoryToArticleRecursive4'


class FindManyCategoryToArticleArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CategoryToArticleOrderByInput', List['CategoryToArticleOrderByInput']]
    where: 'CategoryToArticleWhereInput'
    cursor: 'CategoryToArticleWhereUniqueInput'
    distinct: List['CategoryToArticleScalarFieldKeys']
    
    

class CommentIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive1']
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class CommentIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive2']
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class CommentIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive3']
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class CommentIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive4']
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class CommentIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class CommentArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyCommentArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive1']
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class LikeIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive2']
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class LikeIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive3']
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class LikeIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    article: Union[bool, 'ArticleArgsFromLikeRecursive4']
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class LikeIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class LikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyLikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyLikeArgs = FindManyLikeArgsFromLike
FindFirstLikeArgs = FindManyLikeArgsFromLike


    

class LikeWhereInput(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive1', List['LikeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive1']
    OR: List['LikeWhereInputRecursive1']
    NOT: List['LikeWhereInputRecursive1']


class LikeWhereInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive2', List['LikeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive2']
    OR: List['LikeWhereInputRecursive2']
    NOT: List['LikeWhereInputRecursive2']


class LikeWhereInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive3', List['LikeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive3']
    OR: List['LikeWhereInputRecursive3']
    NOT: List['LikeWhereInputRecursive3']


class LikeWhereInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive4', List['LikeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive4']
    OR: List['LikeWhereInputRecursive4']
    NOT: List['LikeWhereInputRecursive4']


class LikeWhereInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    articleId: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    article: 'ArticleRelationFilter'
    user: 'UserRelationFilter'



# aggregate Like types


    

class LikeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive1']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive1']


class LikeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive2']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive2']


class LikeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive3']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive3']


class LikeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive4']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive4']


class LikeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    articleId: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']



class LikeGroupByOutput(TypedDict, total=False):
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int
    _sum: 'LikeSumAggregateOutput'
    _avg: 'LikeAvgAggregateOutput'
    _min: 'LikeMinAggregateOutput'
    _max: 'LikeMaxAggregateOutput'
    _count: 'LikeCountAggregateOutput'


class LikeAvgAggregateOutput(TypedDict, total=False):
    """Like output for aggregating averages"""
    articleId: float
    userId: float


class LikeSumAggregateOutput(TypedDict, total=False):
    """Like output for aggregating sums"""
    articleId: _int
    userId: _int


class LikeScalarAggregateOutput(TypedDict, total=False):
    """Like output including scalar fields"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    articleId: _int
    userId: _int


LikeMinAggregateOutput = LikeScalarAggregateOutput
LikeMaxAggregateOutput = LikeScalarAggregateOutput


class LikeMaxAggregateInput(TypedDict, total=False):
    """Like input for aggregating by max"""
    createdAt: bool
    updatedAt: bool
    articleId: bool
    userId: bool


class LikeMinAggregateInput(TypedDict, total=False):
    """Like input for aggregating by min"""
    createdAt: bool
    updatedAt: bool
    articleId: bool
    userId: bool


class LikeNumberAggregateInput(TypedDict, total=False):
    """Like input for aggregating numbers"""
    articleId: bool
    userId: bool


LikeAvgAggregateInput = LikeNumberAggregateInput
LikeSumAggregateInput = LikeNumberAggregateInput


LikeCountAggregateInput = TypedDict(
    'LikeCountAggregateInput',
    {
        'createdAt': bool,
        'updatedAt': bool,
        'articleId': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

LikeCountAggregateOutput = TypedDict(
    'LikeCountAggregateOutput',
    {
        'createdAt': int,
        'updatedAt': int,
        'articleId': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


LikeKeys = Literal[
    'createdAt',
    'updatedAt',
    'articleId',
    'userId',
    'article',
    'user',
]
LikeScalarFieldKeys = Literal[
    'createdAt',
    'updatedAt',
    'articleId',
    'userId',
]
LikeScalarFieldKeysT = TypeVar('LikeScalarFieldKeysT', bound=LikeScalarFieldKeys)

LikeRelationalFieldKeys = Literal[
        'article',
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields